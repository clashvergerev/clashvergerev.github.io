<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashvergerev.github.io/news/article-108326.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Git 代码管理（代码提交和代码回退）</title>
        <meta name="description" content="Git 代码管理（代码提交和代码回退） Git的主要功能是代码管理，版本管理，分支管理。 在远程代码管理平台上，项目的代码被管理在一个远程代码仓库中，在本地，代码保存在一个本地代码仓库中。通过Git，" />
        <link rel="icon" href="/assets/website/img/clashvergerev/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Verge Rev节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashvergerev.github.io/news/article-108326.htm" />
    <meta property="og:site_name" content="Clash Verge Rev节点订阅站" />
    <meta property="og:title" content="Git 代码管理（代码提交和代码回退）" />
    <meta property="og:image" content="https://clashvergerev.github.io/uploads/20240722-1/fdbfaa600f4d911ede25cc19e7130b6c.webp" />
        <meta property="og:release_date" content="2025-04-30T09:35:05" />
    <meta property="og:updated_time" content="2025-04-30T09:35:05" />
        <meta property="og:description" content="Git 代码管理（代码提交和代码回退） Git的主要功能是代码管理，版本管理，分支管理。 在远程代码管理平台上，项目的代码被管理在一个远程代码仓库中，在本地，代码保存在一个本地代码仓库中。通过Git，" />
        
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/bootstrap-4.5.0.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/animate.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/LineIcons.2.0.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/owl.carousel.2.3.4.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/owl.theme.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/nivo-lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/main.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/responsive.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Git 代码管理（代码提交和代码回退）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-T6B4E54XZZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-T6B4E54XZZ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <header class="blog-hero-area">
                <div class="overlay">
            <span></span>
            <span></span>
        </div>
        <div class="navbar-area">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                            <a class="navbar-brand" href="/">
                                                            <span>Clash Verge Rev</span>
                                                        </a>
                            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <ul id="nav" class="navbar-nav ml-auto">
                                                                        <li class="nav-item">
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/client.htm">客户端</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                    </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <div id="home">
            <div class="container">
                <div class="row justify-content-lg-center">
                    <div class="col-lg-10">
                        <div class="contents text-center">
                            <h1>Git 代码管理（代码提交和代码回退）</h1>
                            <div class="post-meta">
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <section id="business-plan">
        <div class="container pt-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="htmledit_views"> <h3>Git 代码管理（代码提交和代码回退）</h3> <p>Git的主要功能是代码管理，版本管理，分支管理。</p> <p>在远程代码管理平台上，项目的代码被管理在一个远程代码仓库中，在本地，代码保存在一个本地代码仓库中。通过Git，本地对代码进行修改后，可以提交到远程代码仓库，当远程的代码被他人修改后，也可以拉取代码到本地。</p> <p><strong>一、工作区、暂存区和仓库区</strong></p> <p>将代码从远程代码仓库中拉到本地仓库后，本地仓库的代码与远程仓库的最新代码保持一致。这时候可以在本地仓库中对代码进行修改。修改代码之后，需要按步骤将代码提交并推到远程仓库，要理解这个过程，就要知道工作区、暂存区和仓库区。</p> <p>当不得不回退/回滚代码时，对工作区、暂存区、仓库区的理解更是重要。</p> <p>工作区、暂存区、仓库区是虚拟的概念，并不是物理上有三个独立的空间，其实相当于是代码提交的三个阶段。</p> <p>工作区：开发人员增加、修改、删除代码/文件时，都是在工作区中进行的。工作区有两个状态很重要，修改前(拉取代码后没有做任何修改)和修改后(确定修改内容并保存)。</p> <p>暂存区：是开发人员完成部分功能后将代码和文件暂存的区域。工作区的代码完成后，必须先经过暂存区才能提交。这个区域的代码会生成版本，不过提交后版本就没有了。</p> <p>仓库区：是开发人员完成阶段性的功能后将代码提交的区域，这个区域的代码每次提交都有版本号(版本号很重要)，可以用于查看版本和回退版本。暂存区的代码，必须要经过仓库区才能推到远程仓库。</p> <p><strong>二、工作区、暂存区、仓库区和远程仓库的关系</strong></p> <p><img fetchpriority="high" decoding="async" alt="" class="has" height="377" src="http://img.555519.xyz/uploads3/20220605/00603e66fe7f5e10f37fb54b6b0fb5e6.jpg"></p> <p>一开始从远程仓库中拉取最新代码，代码保存在本地仓库中，开发人员还没有对代码做任何的修改，所以代码处于工作区未修改状态。</p> <p>对代码修改、增加、删除后，保存代码，此时代码仍然在工作区，现在处于修改后的状态。</p> <p>使用 git add . 将修改后的代码添加到暂存区。</p> <p>使用 git commit -m "提交信息" 将暂存区的代码提交到仓库区，每次提交都有对应的版本号。</p> <p>使用 git push 将代码从本地仓库区推到远程代码仓库上。</p> <p>每一个步骤都可以支持回退/回滚。</p> <p>修改后的代码要回退到修改前，使用 git checkout file。新增加的文件要回到修改前，直接rm file。</p> <p>暂存区、仓库区、远程仓库的代码回退/回滚都可以使用&nbsp;git reset 来实现，根据版本号指定回退的版本，HEAD 或 commit-id。</p> <p>git reset 有三个参数：</p> <p>--hard 会将代码回退到修改前的状态，就相当于上次拉完代码的状态。所有增加、修改、删除的内容都不在了。（这个操作要慎重）</p> <p>--mixed 会将代码回退到修改后的状态，可以再次对代码增加、修改、删除，保存，添加到暂存区，提交到仓库区。</p> <p>--soft 会将代码回退到暂存区，可以继续往前回退，也可以重新提交到仓库区。</p> <p>如果代码已经推到了远程仓库，reset 回滚后重新推代码时，一定要加 --force 或 -f 参数，才能将本地仓库的版本覆盖远程仓库的代码，避免代码冲突。（这个操作也要慎重，要与团队做好沟通，否则会把其他人的代码也覆盖了）</p> <p><strong>三、Git代码管理（提交和回退）</strong></p> <p>本文中，有一个叫 GitProject 的项目代码托管在 Github 上，在 Windows 本地已经配置好了本地代码仓库，这个项目是一个新建的项目，里面没有任何代码(只有一个 README 文件)。</p> <p>1. 右键打开 Git Bash , 进入本地代码的目录中，为了方便练习&nbsp;git 的使用，我先创建了一个 git.py 文件，写了几行代码，然后将代码推到了远程仓库，下面的步骤基于这次提交的代码来做修改。</p> <p>编写代码可以使用任何您喜欢的方式，各种编辑器、IDE都可以，比如用vi写好后wq保存退出。不管用什么方式，代码都是处于工作区，都可以保存代码然后按步骤提交代码。</p> <p><img decoding="async" alt="" class="has" height="327" src="http://img.555519.xyz/uploads3/20220605/221cfecab65360a54bf602170eb94117.jpg"></p> <p>2. 确认分支和拉取代码</p> <p>不管任何时候，在开始修改代码之前，都记得先做两步操作。</p> <p>第一，先看当前处于哪个分支上，当前 GitProject 项目还只有一个分支 master ，所以用的是 master 。</p> <p>在实际的工作中，代码的分支会非常多，大的项目活跃的分支可能10几个，还有很多不常用的分支。而且，实际工作中是不会直接在mster分支上修改和调试代码的，都是先在其他分支测试通过之后，才会合入到master分支。</p> <p>所以第一步先看当前分支是不是自己要修改代码的分支，如果不是先切换，否则改了很多代码发现改错分支了，很麻烦。</p> <pre class="has"><code># 查看当前分支 git branch # 查看所有分支 git branch -a # 切换分支 git checkout master # 如果分支是在远程仓库创建的，可以这样获取 git fetch origin</code></pre> <p>第二步，git pull 拉取当前最新的代码，如果不是最新的代码，修改代码后向远程仓库提交时，会造成代码冲突。</p> <pre class="has"><code># 拉取最新代码 git pull</code></pre> <p>做好以上两步，基本可以避免大部分的代码回退问题和代码冲突问题。</p> <p>确认好分支是最新代码后，在git.py中进行开发(增加一行代码)，然后保存。</p> <p><img decoding="async" alt="" class="has" height="345" src="http://img.555519.xyz/uploads3/20220605/9a869475aa93d4b38ca0cef7b7bb99fd.jpg"></p> <p>3. 修改代码和取消修改</p> <p>在修改代码前，使用 git status查看当前的状态，代码提示的是 nothing to commit，修改并保存后，git.py 的名字变成了红色，当前 git.py 处于工作区已修改的状态。</p> <p>如果现在保存的代码不想要了，可以用 git checkout file 使代码回到修改之前，所有修改的内容都不会保存，如果是一个新增加的文件，可以使用 rm file 直接删除文件，回到修改前。</p> <pre class="has"><code># 查看当前代码状态 git status # 修改后回退到修改前 git checkout git.py</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="559" src="http://img.555519.xyz/uploads3/20220605/9f11495c620467c4669a12e18017bd66.jpg"></p> <p>4. 查看修改内容</p> <p>修改并保存代码后，可以使用 git diff 查看修改的内容。</p> <pre class="has"><code># 查看修改的代码内容 git diff</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="371" src="http://img.555519.xyz/uploads3/20220605/0d781e554e1298ad0c19d9b47fa71409.jpg"></p> <p>5. add添加代码和回退</p> <p>代码处于工作区修改后的状态，可以使用 git add file 或 git add . 将代码添加到暂存区。git add file 是添加指定的文件，</p> <p>git add . 是将整个工作区中保存了的内容都添加到暂存区。</p> <pre class="has"><code># 添加git.py到暂存区 git add git.py # 添加所有已修改代码到暂存区 git add .</code></pre> <p>代码添加到暂存区后，使用 git status 查看到当前的状态，git.py 的名字变成了绿色，说明当前代码处于暂存区。</p> <p>如果不想继续提交代码，将代码回退到前面的状态，可以使用 git reset HEAD git.py 回退到工作区修改后的状态。</p> <p>其中，git reset 是所有操作过程中都可以使用的回退命令，后面接要回退的文件名，不指定文件则回退所有的修改。</p> <p>HEAD 表示当前的版本，当前版本可以省略，HEAD~ 或 HEAD^ 表示当前版本的上一个版本，后面可以接多个~或^，也可以接数字。如HEAD~~~表示当前版本往前数的第3个版本，HEAD~5表示当前版本往前数的第5个版本。</p> <p>git reset 后还有三个参数， --soft回退到暂存区，--mixed回退到工作区修改后的状态，--mixed可以省略不写，--hard回退到修改之前的状态。</p> <p>所以 git reset 、 git reset git.py 、&nbsp;git reset HEAD git.py 和 git reset&nbsp;--mixed HEAD git.py 一样，都是将 git.py 回退到当前版本的修改后状态。</p> <pre class="has"><code># 回退代码到工作区修改后 git reset --mixed HEAD git.py</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="423" src="http://img.555519.xyz/uploads3/20220605/1dcc3ffadb42276808a6b60755b721c2.jpg"></p> <p>6. commit提交代码和回退</p> <p>代码处于暂存区时，可以使用 git commit -m "提交信息" 来将代码提交到仓库区。</p> <p>如果代码处于工作区，也可以使用 git commit -am "提交信息" 将代码从工作区提交到仓库区，相当于 git add 和 git commit 命令合并成一条命令，两步操作合并了。</p> <pre class="has"><code># 提交代码 git commit -m "add print**"</code></pre> <p>提交代码后，代码处于待 git push 的状态，现在 git status 已经不显示被修改的 git.py 了。</p> <p>一旦 git commit ，代码就立即生成一个新的版本号，要回退就是上一个版本了。</p> <p>如果代码已经 git cmmit 提交，想要回退，可以使用 git reset --soft HEAD~ 来将代码回退到暂存区。可以使用 git reset HEAD~ 或 git reset --mixed HEAD~&nbsp;回退到工作区修改之后， 可以使用 git reset --hard HEAD~ 回到工作区修改代码前。</p> <pre class="has"><code># 回退代码到暂存区 git reset --soft HEAD~</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="473" src="http://img.555519.xyz/uploads3/20220605/8b7818d8caed44cd03c63dd4c6fd35e5.jpg"></p> <p>7. push推代码到远程仓库</p> <p>在本地仓库区的代码，使用 git push origin 分支名 将代码推到远程仓库中，也可以直接 git push ，但建议还是跟上分支名。</p> <pre class="has"><code># 将代码推到远程仓库 git push origin master</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="322" src="http://img.555519.xyz/uploads3/20220605/489c60e267df5f9dee37043ce722d6c5.jpg"></p> <p>8. 查看远程仓库</p> <p>到远程仓库查看，现在的 GitProject 项目有三次提交(前两次分别是新建项目，创建git.py文件)，第三次提交的信息为 add print**， 正是我们刚才提交过来的代码，说明代码已经被推到了远程仓库。</p> <p><img loading="lazy" decoding="async" alt="" class="has" height="319" src="http://img.555519.xyz/uploads3/20220605/3596f1207687d9105af39331061e5074.jpg"></p> <p>9. 回退提交到远程仓库的代码</p> <p>如果代码已经推到了远程仓库，但是发现代码有问题，需要将代码回滚，还是可以使用 git reset 来回滚代码。</p> <p>回退到的位置依然是根据版本和 --soft --mixed --hard 三个参数来定位，回退的命令与前面的相同。</p> <p><img loading="lazy" decoding="async" alt="" class="has" height="284" src="http://img.555519.xyz/uploads3/20220605/e73b1c5221e5fede12dd08ba3a730bb5.jpg"></p> <p>10. 重新提交回退的代码</p> <p>现在将代码回退到了暂存区，现在的状态是待提交状态。</p> <p>也可以回退到工作区进行修改，重新提交代码，然后推代码到远程仓库。</p> <p>现在远程仓库的代码是第三次提交后的代码，本地代码回退了第三次提交，相当于是第二次提交之后的状态。在第二次提交的基础上重新提交，次数还是第三次。</p> <p>远程已经有了三次提交，又要推另一个第三次提交，这会造成冲突问题，无法推成功。所以，在推代码的时候要加上 --force 或 -f ，表示将本地回退后重新提交的代码覆盖远程仓库的提交。</p> <pre class="has"><code># 提交并覆盖远程仓库 git push origin master --force</code></pre> <p><img loading="lazy" decoding="async" alt="" class="has" height="311" src="http://img.555519.xyz/uploads3/20220605/c9083c4ba51c1ffcefd51cb5129a8e83.jpg"></p> <p>11. 重新提交后，远程仓库的提交次数还是3次，但是提交信息已经改变了。说明上次提交到远程仓库的代码已经被覆盖了。</p> <p><img loading="lazy" decoding="async" alt="" class="has" height="329" src="http://img.555519.xyz/uploads3/20220605/43e1c1f2be7d3364b0ef57fa34fa9ca6.jpg"></p> <p>上面所有的回退操作中，版本号都可以通过 HEAD 来确定版本的。</p> <p>每次 commit 提交都会生成一个唯一的 commit-id，要找到指定的版本，也可以使用 git log 或 git reflog 来查看提交过的 commit-id ，然后通过 commit-id 来指定版本。</p> <p>git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log 则不能察看已经删除了的commit记录。</p> <p>回退命令：</p> <pre class="has"><code># 回退到指定版本 git reset --hard commit-id</code></pre> <p>在工作中，更安全更常用的回退代码方式是 Revert ，Revert 操作会生成一个新的 commit-id ，然后将 Revert 操作提交，就回退了代码。如果回退掉的代码又要 Merged 进来，可以再次 Revert，又生成一个新的 commit-id，然后提交。</p> <p>使用 Revert 进行的每一次操作，都会有对应的 commit-id，并且 Revert&nbsp;不会对其他人的代码造成影响，所以更适用。</p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-108325.htm">java面向对象是什么意思_java什么是面向对象</a></p>
                                        <p>下一个：<a href="/news/article-109277.htm">动物医院应聘（动物医院应聘要求）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-96785.htm" title="央视猫（央视猫）">央视猫（央视猫）</a></li>
                        <li class="py-2"><a href="/news/article-105719.htm" title="开宠物店需要什么手续和证件（开宠物店需要什么手续和证件流程）">开宠物店需要什么手续和证件（开宠物店需要什么手续和证件流程）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-19-latest-clash-verge-rev-node.htm" title="「4月19日」最高速度20.7M/S，2025年Clsah Verge每天更新免费节点订阅地址">「4月19日」最高速度20.7M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-96031.htm" title="动物医院贵吗多少钱一个月（动物医院挣钱吗）">动物医院贵吗多少钱一个月（动物医院挣钱吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-17-clash-verge-rev-windows.htm" title="「4月17日」最高速度18.6M/S，2025年Clsah Verge每天更新免费节点订阅地址">「4月17日」最高速度18.6M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-5-1-latest-clash-verge-rev-node.htm" title="「5月1日」最高速度21.5M/S，2025年Clsah Verge每天更新免费节点订阅地址">「5月1日」最高速度21.5M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-30-clash-verge-rev-node-github.htm" title="「4月30日」最高速度20.4M/S，2025年Clsah Verge每天更新免费节点订阅地址">「4月30日」最高速度20.4M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-88570.htm" title="上海市浦东新区宠物救助中心（上海市浦东新区宠物医院）">上海市浦东新区宠物救助中心（上海市浦东新区宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-91370.htm" title="同安宠物救助中心电话 同安宠物救助中心电话号码">同安宠物救助中心电话 同安宠物救助中心电话号码</a></li>
                        <li class="py-2"><a href="/news/article-108326.htm" title="Git 代码管理（代码提交和代码回退）">Git 代码管理（代码提交和代码回退）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <footer>
    <section id="footer-Content">
        <div class="copyright">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="site-info text-center">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Clash Verge Rev节点订阅站</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</footer>
<a href="#" class="back-to-top">
    <i class="lni lni-chevron-up"></i>
</a>
<div id="preloader">
    <div class="loader" id="loader-1"></div>
</div>
<script src="/assets/website/js/frontend/clashvergerev/vendor/modernizr-3.7.1.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/vendor/jquery-3.5.1-min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/popper.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/bootstrap-4.5.0.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/owl.carousel.2.3.4.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/nivo-lightbox.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/jquery.magnific-popup.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/form-validator.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/contact-form-script.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
<script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>