<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashvergerev.github.io/news/article-93010.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Java8 接口新特性</title>
        <meta name="description" content="接口改动一下就要修改对应的实现类，为了兼容老接口，Java8新增了默认方法和静态方法；  对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现 1)静态方法可以直接调用，不能被重写 2)" />
        <link rel="icon" href="/assets/website/img/clashvergerev/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Verge Rev节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashvergerev.github.io/news/article-93010.htm" />
    <meta property="og:site_name" content="Clash Verge Rev节点订阅站" />
    <meta property="og:title" content="Java8 接口新特性" />
    <meta property="og:image" content="https://clashvergerev.github.io/uploads/20240722-1/fc515139c974d9bd0e5e87ff0a433868.webp" />
        <meta property="og:release_date" content="2025-04-10T08:20:30" />
    <meta property="og:updated_time" content="2025-04-10T08:20:30" />
        <meta property="og:description" content="接口改动一下就要修改对应的实现类，为了兼容老接口，Java8新增了默认方法和静态方法；  对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现 1)静态方法可以直接调用，不能被重写 2)" />
        
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/bootstrap-4.5.0.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/animate.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/LineIcons.2.0.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/owl.carousel.2.3.4.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/owl.theme.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/nivo-lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/main.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergerev/responsive.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java8 接口新特性">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-T6B4E54XZZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-T6B4E54XZZ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <header class="blog-hero-area">
                <div class="overlay">
            <span></span>
            <span></span>
        </div>
        <div class="navbar-area">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                            <a class="navbar-brand" href="/">
                                                            <span>Clash Verge Rev</span>
                                                        </a>
                            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <ul id="nav" class="navbar-nav ml-auto">
                                                                        <li class="nav-item">
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/client.htm">客户端</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                    </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <div id="home">
            <div class="container">
                <div class="row justify-content-lg-center">
                    <div class="col-lg-10">
                        <div class="contents text-center">
                            <h1>Java8 接口新特性</h1>
                            <div class="post-meta">
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <section id="business-plan">
        <div class="container pt-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> </h1> <p>接口改动一下就要修改对应的实现类，为了兼容老接口，Java8新增了<strong>默认方法</strong>和<strong>静态方法</strong>；</p> <blockquote> <p>对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现<br /> 1)静态方法可以直接调用，不能被重写<br /> 2)默认方法需要通过实现类，重写后实例化后调用</p> </blockquote> <p>一个例子，演示默认方法、静态方法和实现类中对它们的重写，抽象方法doSomthing()就不赘述：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">//一个有多个默认方法和静态方法的接口CommonInterface</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommonInterface</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//默认方法</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's default method　is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//默认方法可以有多个</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's second default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//静态方法</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//静态方法也可以有多个</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's second static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">//　一个跟上边一模一样的接口CommonInterface1</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommonInterface1</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//默认方法</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//默认方法可以有多个</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's second default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//静态方法</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//静态方法也可以有多个</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's second static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <p>实现类在尝试重写静态方法时报错，可见静态方法不允许重写：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CommonInterface</span><span class="token punctuation">,</span> CommonInterface1 <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.doSomthing(): 我们来学习Java8新特性吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.defaultMehtod()-------------start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface1<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.defaultMehtod()-------------end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.anotherDefaultMehtod()-------------start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface1<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.anotherDefaultMehtod()-------------end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//默认方法　和　抽象方法需实现类实例化后调用</span>         CommonInterface commonInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonInterfaceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//抽象方法重写后调用</span>         commonInterface<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//默认方法重写后调用</span>         commonInterface<span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         commonInterface<span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ｝       </code></code></pre> <p>结果：</p> <pre class="language-shell"><code class="prism  language-shell">CommonInterface<span class="token string">'s static method is running... CommonInterface'</span>s second static method is running<span class="token punctuation">..</span>. CommonInterface1<span class="token string">'s static method is running... CommonInterface1'</span>s second static method is running<span class="token punctuation">..</span>.  CommonInterfaceImpl.doSomthing<span class="token punctuation">(</span><span class="token punctuation">)</span>: 我们来学习Java8新特性吧！  CommonInterfaceImpl.defaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------start CommonInterface<span class="token string">'s default method　is running... CommonInterface1'</span>s default method is running<span class="token punctuation">..</span>. CommonInterfaceImpl.defaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------end  CommonInterfaceImpl.anotherDefaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------start CommonInterface<span class="token string">'s second default method is running... CommonInterface1'</span>s second default method is running<span class="token punctuation">..</span>. CommonInterfaceImpl.anotherDefaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------end </code></pre> </h1> <p>函数式接口(Functional Interface)是只有一个抽象方法的接口。</p> <ol> <li>函数式接口中的抽象函数就是为了支持 lambda表达式；</li> <li>函数式接口可以被隐式转换为lambda表达式；</li> <li>为确保函数式接口符合语法，可以添加@FunctionalInterface注解；</li> </ol> <pre><code class="language-java"><code class="prism  language-java"><span class="token annotation punctuation">@FunctionalInterface</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FuncInterface</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//只有一个抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	 	<span class="token comment">//还可以有其他方法</span>     <span class="token comment">//interface default method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a default method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//interface second default method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is the second default method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//interface static method</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a static method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//interface second static method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is the second static method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> </h1> <p>Java 8添加一个新的包"java.util.function"，通常用于lambda表达式和方法引用，包下有很多通用接口：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/af6afb676e47e6578665314e720749e3.jpg" alt="Java8 接口新特性"><br /> 大致可以分为这几类：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/dbc3a52e1b8087b4622bd5c204daabd8.jpg" alt="Java8 接口新特性"><br /> 3.1 消费型接口<br /><em>Consumer</em> 有一个accept(T t) 方法接受一个入参没有返回，只要符合这个格式的参数，无需再写函数式接口，可以直接写lambda表达式：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/f823a8d9e5cdadb66e101cd65ba6a372.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * buy方法有个Consumer&lt;Integer&gt;的入参      * @param money      * @param consumer      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span>Integer money<span class="token punctuation">,</span> Consumer<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//消费型：第二个参数为实现了Consumer&lt;T&gt;接口accept(T t)方法的lambda表达式</span>         <span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> money <span class="token operator">-</span><span class="token operator">&gt;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费型--&gt;我买面包花了:"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">消费型<span class="token operator">--</span><span class="token operator">&gt;</span>我买面包花了<span class="token operator">:</span><span class="token number">1000</span>元 </code></code></pre> <p>3.2 供给型接口<br /><em>Supplier</em> 有一个get()方法无入参一个返回：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/8e26ac76327c63bac065c103115ec5e6.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * factory方法有个Supplier&lt;Integer&gt;的入参      * @param supplier      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">factory</span><span class="token punctuation">(</span>Supplier<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//供给型：参数为实现了Supplier&lt;Integer&gt;接口get()方法的lambda表达式</span>         String phone <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> <span class="token string">"Apple8"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"供给型--&gt;富士康生产的有名的手机是:"</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">供给型<span class="token operator">--</span><span class="token operator">&gt;</span>富士康生产的有名的手机是<span class="token operator">:</span>Apple8 </code></code></pre> <p>3.3 函数型接口<br /><em>Function接口</em>有一个apply(T t)方法接受入参有一个返回：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/7ff585517d21d7db5da2cd0d7ce40305.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * convert方法有个Function&lt;String, Integer&gt;的入参      * @param str      * @param function      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">convert</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Function<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//函数型：参数为实现了Function&lt;String, Integer&gt;接口apply(T t)方法的lambda表达式</span>         Integer num <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">&gt;</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数型--&gt;字符型666被转换成了数字: "</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">函数型<span class="token operator">--</span><span class="token operator">&gt;</span>字符型<span class="token number">666</span>被转换成了数字<span class="token operator">:</span> <span class="token number">666</span> </code></code></pre> <p>3.4 断言型接口<br /><em>Predicate</em> 有一个test(T t)方法有一个入参并返回一个boolean：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/9d657ac954da053e5d06832567339925.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * isNoble方法有个Predicate&lt;String&gt;的入参      *      * @param name      * @param predicate      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">isNoble</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Predicate<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token string">"贵族"</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"平民"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//断言型：参数为实现了Predicate&lt;String&gt;接口test(T t)方法的lambda表达式</span>         String na <span class="token operator">=</span> <span class="token string">"尼古拉斯赵四"</span><span class="token punctuation">;</span>         String noble <span class="token operator">=</span> <span class="token function">isNoble</span><span class="token punctuation">(</span>na<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"尼古拉斯"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"断言型--&gt;从你的名字就可以看出你是个："</span> <span class="token operator">+</span> noble<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">断言型<span class="token operator">--</span><span class="token operator">&gt;</span>从你的名字就可以看出你是个：贵族 </code></code></pre> <p>涉及代码：–&gt;<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Weision/java8-new-features"  rel="nofollow">GitHub</a></p> <hr/> <blockquote> <p>参考文献：<br /> [ 1 ]Java8函数式编程/(英)Richard Warburton著;王群锋译。–北京:人民邮电出版社，2015-03-01.<br /> [ 2 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.importnew.com/26080.html"  rel="nofollow">http://www.importnew.com/26080.html</a><br /> [ 3 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://java8.in/java-8-lambda-expression/"  rel="nofollow">http://java8.in/java-8-lambda-expression/</a><br /> [ 4 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6"  rel="nofollow">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6</a><br /> [ 5 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://winterbe.com/posts/2014/03/16/java-8-tutorial/"  rel="nofollow">https://winterbe.com/posts/2014/03/16/java-8-tutorial/</a></p> </blockquote></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-92214.htm">布偶猫很少有人养（布偶不好养吗）</a></p>
                                        <p>下一个：<a href="/news/article-93011.htm">Ribbon、Hystrix超时问题</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-84993.htm" title="动物疫病预防中心是干什么的（动物疾病防疫中心）">动物疫病预防中心是干什么的（动物疾病防疫中心）</a></li>
                        <li class="py-2"><a href="/news/article-75943.htm" title="宠物鲜粮品牌排行榜（宠物鲜粮市场前景）">宠物鲜粮品牌排行榜（宠物鲜粮市场前景）</a></li>
                        <li class="py-2"><a href="/news/article-68621.htm" title="兽医门诊起名大全（兽医公司好听的名字）">兽医门诊起名大全（兽医公司好听的名字）</a></li>
                        <li class="py-2"><a href="/news/article-75252.htm" title="TypeError: Cannot read property &#8216;xxxx&#8217; of undefined的解决方法">TypeError: Cannot read property &#8216;xxxx&#8217; of undefined的解决方法</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-6-latest-clash-verge-rev-node.htm" title="「4月6日」最高速度20.6M/S，2025年Clsah Verge每天更新免费节点订阅地址">「4月6日」最高速度20.6M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-90795.htm" title="襄阳领养宠物在哪里（襄阳哪里有领养狗狗的）">襄阳领养宠物在哪里（襄阳哪里有领养狗狗的）</a></li>
                        <li class="py-2"><a href="/news/article-72590.htm" title="宠物粮批发网（宠物粮批发网站）">宠物粮批发网（宠物粮批发网站）</a></li>
                        <li class="py-2"><a href="/news/article-87130.htm" title="springboot整合Dubbo与Feign的实现 (无注册中心)_java">springboot整合Dubbo与Feign的实现 (无注册中心)_java</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-2-free-high-speed-nodes.htm" title="「3月2日」最高速度19.2M/S，2025年Clsah Verge每天更新免费节点订阅地址">「3月2日」最高速度19.2M/S，2025年Clsah Verge每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-84252.htm" title="狗狗疫苗自己打可以办狗证吗（狗狗疫苗自己打可以办狗证吗多少钱）">狗狗疫苗自己打可以办狗证吗（狗狗疫苗自己打可以办狗证吗多少钱）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <footer>
    <section id="footer-Content">
        <div class="copyright">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="site-info text-center">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Clash Verge Rev节点订阅站</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</footer>
<a href="#" class="back-to-top">
    <i class="lni lni-chevron-up"></i>
</a>
<div id="preloader">
    <div class="loader" id="loader-1"></div>
</div>
<script src="/assets/website/js/frontend/clashvergerev/vendor/modernizr-3.7.1.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/vendor/jquery-3.5.1-min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/popper.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/bootstrap-4.5.0.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/owl.carousel.2.3.4.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/nivo-lightbox.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/jquery.magnific-popup.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/form-validator.min.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/contact-form-script.js"></script>
<script src="/assets/website/js/frontend/clashvergerev/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
<script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>